{% extends 'base.html.twig' %}

{% block title %}{{ 'cq_chat.page_title'|trans }} - {{ parent() }}{% endblock %}

{% block body %}
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="glass-panel glass-panel-glow p-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3 mb-0">
                        <i class="mdi mdi-forum me-2 text-cyber"></i>
                        {{ 'cq_chat.page_title'|trans }}
                    </h1>
                    <button id="cqChatPageNewChatBtn" class="btn btn-sm btn-cyber">
                        <i class="mdi mdi-message-plus me-2"></i><span class="d-none d-md-inline">{{ 'cq_chat.new_chat'|trans }}</span>
                    </button>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6 mb-2">
                        <div class="input-group">
                            <span class="input-group-text glass-panel"><i class="mdi mdi-magnify"></i></span>
                            <input type="text" id="chatSearch" class="form-control glass-input" placeholder="{{ 'cq_chat.search_placeholder'|trans }}">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <select id="chatFilter" class="form-select glass-input">
                            <option value="">{{ 'cq_chat.filter_all'|trans }}</option>
                            <option value="starred">{{ 'cq_chat.filter_starred'|trans }}</option>
                            <option value="pinned">{{ 'cq_chat.filter_pinned'|trans }}</option>
                        </select>
                    </div>
                </div>

                <div id="chatsContainer">
                    <div class="text-center py-5">
                        <i class="mdi mdi-loading mdi-spin text-cyber fs-2"></i>
                        <p class="mt-2">{{ 'cq_chat.loading'|trans }}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const chatsContainer = document.getElementById('chatsContainer');
    const chatSearch = document.getElementById('chatSearch');
    const chatFilter = document.getElementById('chatFilter');

    let chats = [];
    let contacts = [];

    // Load chats
    function loadChats() {
        fetch('/api/cq-chat')
            .then(response => response.json())
            .then(data => {
                chats = data;
                renderChats();
            })
            .catch(error => {
                console.error('Error loading chats:', error);
                chatsContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="mdi mdi-alert me-2"></i>{{ 'cq_chat.error_loading'|trans }}
                    </div>
                `;
            });
    }

    // Old contact dropdown and 1-on-1 chat code removed
    // Now using Group Chat modal for all chats (including 2-member chats)

    // Render chats
    function renderChats() {
        const searchTerm = chatSearch.value.toLowerCase();
        const filterValue = chatFilter.value;

        let filteredChats = chats.filter(chat => {
            const matchesSearch = chat.title.toLowerCase().includes(searchTerm) || 
                                 (chat.summary && chat.summary.toLowerCase().includes(searchTerm));
            
            let matchesFilter = true;
            if (filterValue === 'starred') {
                matchesFilter = chat.isStar;
            } else if (filterValue === 'pinned') {
                matchesFilter = chat.isPin;
            }

            return matchesSearch && matchesFilter;
        });

        if (filteredChats.length === 0) {
            chatsContainer.innerHTML = `
                <div class="text-center py-5">
                    <i class="mdi mdi-chat-remove text-muted fs-2"></i>
                    <p class="mt-2 text-muted">{{ 'cq_chat.no_chats'|trans }}</p>
                </div>
            `;
            return;
        }

        const chatsHtml = filteredChats.map(chat => {
            // Status icons for top-right corner
            const statusIcons = [];
            if (chat.isStar) statusIcons.push('<i class="mdi mdi-star text-warning" title="{{ "cq_chat.starred"|trans }}"></i>');
            if (chat.isPin) statusIcons.push('<i class="mdi mdi-pin text-light" title="{{ "cq_chat.pinned"|trans }}"></i>');
            if (chat.isMute) statusIcons.push('<i class="mdi mdi-volume-off text-secondary" title="{{ "cq_chat.muted"|trans }}"></i>');

            // Group chat indicator
            const groupIndicator = chat.isGroupChat ? '<i class="mdi mdi-account-multiple text-light me-1 opacity-50" title="Group Chat"></i>' : '';
            
            return `
                <div class="col-12 col-md-6 col-lg-4 col-xl-3 mb-3">
                    <div class="card glass-panel h-100 chat-card ${chat.isPin ? 'border border-light border-opacity-50' : ''} ${chat.isStar ? 'bg-warning bg-opacity-10' : ''}" data-chat-id="${chat.id}">
                        <div class="card-body d-flex flex-column">
                            <div class="text-muted small d-flex justify-content-between mb-2">
                                <div>${statusIcons.join(' ')}</div>
                                <div><i class="mdi mdi-clock-outline me-1 text-cyber opacity-50"></i>${new Date(chat.updatedAt).toLocaleString()}</div>
                            </div>
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div class="text-cyber cursor-pointer mb-0 open-chat-modal" data-chat-id="${chat.id}">
                                    ${chat.unseenCount > 0 ? `<span class="badge bg-cyber text-dark">${chat.unseenCount}</span>` : ''}
                                    <i class="mdi ${chat.hasNewMsgs ? 'mdi-message-badge text-cyber' : 'mdi-forum text-cyber opacity-100'} me-1"></i>
                                    ${chat.title}
                                    ${groupIndicator}
                                </div>
                                {# <div class="d-flex gap-1">
                                </div> #}
                            </div>
                            ${chat.summary ? `<p class="card-text text-muted small mb-2"><i class="mdi mdi-text me-1 text-cyber opacity-50"></i>${chat.summary}</p>` : '<div class="mb-2"></div>'}
                            <div class="mt-auto d-flex justify-content-end align-items-center">
                                {# <button class="btn btn-sm btn-cyber open-chat-modal" data-chat-id="${chat.id}">
                                    <i class="mdi mdi-message-text me-1"></i>{{ 'ui.view'|trans }}
                                </button> #}
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-sm btn-outline-secondary toggle-star" data-chat-id="${chat.id}" title="${chat.isStar ? '{{ "cq_chat.unstar"|trans }}' : '{{ "cq_chat.star"|trans }}'}">
                                        <i class="mdi ${chat.isStar ? 'mdi-star-off' : 'mdi-star'}"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary toggle-pin" data-chat-id="${chat.id}" title="${chat.isPin ? '{{ "cq_chat.unpin"|trans }}' : '{{ "cq_chat.pin"|trans }}'}">
                                        <i class="mdi ${chat.isPin ? 'mdi-pin-off' : 'mdi-pin'}"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary toggle-mute" data-chat-id="${chat.id}" title="${chat.isMute ? '{{ "cq_chat.unmute"|trans }}' : '{{ "cq_chat.mute"|trans }}'}">
                                        <i class="mdi ${chat.isMute ? 'mdi-volume-high' : 'mdi-volume-off'}"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-danger delete-chat" data-chat-id="${chat.id}" title="{{ 'ui.delete'|trans }}">
                                        <i class="mdi mdi-delete"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        chatsContainer.innerHTML = '<div class="row">' + chatsHtml + '</div>';

        // Add event listeners
        document.querySelectorAll('.open-chat-modal').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const chatId = e.target.closest('.open-chat-modal').dataset.chatId;
                // Use the global CqChatModalManager instance
                if (window.cqChatModalManager) {
                    window.cqChatModalManager.openChat(chatId);
                }
            });
        });

        document.querySelectorAll('.toggle-star').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const chatId = e.target.closest('.toggle-star').dataset.chatId;
                toggleChatStar(chatId);
            });
        });

        document.querySelectorAll('.toggle-pin').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const chatId = e.target.closest('.toggle-pin').dataset.chatId;
                toggleChatPin(chatId);
            });
        });

        document.querySelectorAll('.toggle-mute').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const chatId = e.target.closest('.toggle-mute').dataset.chatId;
                toggleChatMute(chatId);
            });
        });

        document.querySelectorAll('.delete-chat').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const chatId = e.target.closest('.delete-chat').dataset.chatId;
                if (confirm('{{ "cq_chat.confirm_delete"|trans }}')) {
                    deleteChat(chatId);
                }
            });
        });
    }

    // Toggle star status
    function toggleChatStar(chatId) {
        fetch(`/api/cq-chat/${chatId}/toggle-star`, {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                window.toast.success(data.message);
                loadChats();
            } else if (data.error) {
                window.toast.error(data.error);
            }
        })
        .catch(error => {
            console.error('Error toggling star:', error);
            window.toast.error('{{ "cq_chat.error_updating"|trans }}');
        });
    }

    // Toggle pin status
    function toggleChatPin(chatId) {
        fetch(`/api/cq-chat/${chatId}/toggle-pin`, {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                window.toast.success(data.message);
                loadChats();
            } else if (data.error) {
                window.toast.error(data.error);
            }
        })
        .catch(error => {
            console.error('Error toggling pin:', error);
            window.toast.error('{{ "cq_chat.error_updating"|trans }}');
        });
    }

    // Toggle mute status
    function toggleChatMute(chatId) {
        fetch(`/api/cq-chat/${chatId}/toggle-mute`, {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                window.toast.success(data.message);
                loadChats();
            } else if (data.error) {
                window.toast.error(data.error);
            }
        })
        .catch(error => {
            console.error('Error toggling mute:', error);
            window.toast.error('{{ "cq_chat.error_updating"|trans }}');
        });
    }

    // Delete chat
    function deleteChat(chatId) {
        fetch(`/api/cq-chat/${chatId}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                window.toast.success(data.message);
                loadChats();
            } else if (data.error) {
                window.toast.error(data.error);
            }
        })
        .catch(error => {
            console.error('Error deleting chat:', error);
            window.toast.error('{{ "cq_chat.error_deleting"|trans }}');
        });
    }


    // Search and filter event listeners
    chatSearch.addEventListener('input', renderChats);
    chatFilter.addEventListener('change', renderChats);

    // Initial load
    loadChats();
});
</script>
{% endblock %}
