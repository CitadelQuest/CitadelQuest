{% extends 'base.html.twig' %}

{% block title %}AI Models Settings{% endblock %}

{% block body %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-3">
            <div class="card glass-panel mb-4">
                <div class="card-header bg-transparent border-success border-1 border-bottom p-3">
                    <h5 class="mb-0"><i class="mdi mdi-cog me-2"></i>Settings</h5>
                </div>
                <div class="list-group list-group-flush">
                    <a href="{{ path('app_user_settings') }}" class="list-group-item list-group-item-action text-light bg-transparent border-0">
                        <i class="mdi mdi-cog me-2"></i> General
                    </a>
                    <a href="{{ path('app_user_settings_profile') }}" class="list-group-item list-group-item-action link-light bg-transparent border-0">
                        <i class="mdi mdi-account me-2"></i> {{ 'navigation.user_menu.profile'|trans }}
                    </a>
                    <a href="{{ path('app_user_settings_ai') }}" class="list-group-item list-group-item-action text-light bg-transparent border-0">
                        <i class="mdi mdi-robot me-2"></i> AI Services
                    </a>
                    <a href="{{ path('app_user_settings_ai_gateways') }}" class="list-group-item list-group-item-action text-light bg-transparent border-0 ps-4">
                        <i class="mdi mdi-server-network me-2"></i> AI Gateways
                    </a>
                    <a href="{{ path('app_user_settings_ai_models') }}" class="list-group-item list-group-item-action link-light bg-cyber active border-0 ps-4">
                        <i class="mdi mdi-brain me-2"></i> AI Models
                    </a>
                    <!-- Add more settings categories here as needed -->
                </div>
            </div>
        </div>
        
        <div class="col-md-9">
            <div class="glass-panel">
                <div class="bg-cyber-g p-4 rounded-top border-success border-1 border-bottom">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">AI Models</h4>
                        <button type="button" class="btn btn-sm btn-cyber" data-bs-toggle="modal" data-bs-target="#addModelModal">
                            <i class="mdi mdi-plus me-1"></i> Add Model
                        </button>
                    </div>
                </div>
                
                <div class="p-4">
                    {% for message in app.flashes('success') %}
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    {% endfor %}
                    
                    {% for message in app.flashes('danger') %}
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    {% endfor %}
                    
                    <p class="mb-4">Manage your AI models. These are the specific AI models available through your gateways.</p>
                    
                    <!-- Model List -->
                    <div class="mb-4">
                        {% if aiModels is empty %}
                            <div class="alert alert-info">
                                <i class="mdi mdi-information-outline me-2"></i>No AI models found. Add your first model to get started.
                            </div>
                        {% else %}
                            <div class="table-responsive rounded">
                                <table class="table table-hover">
                                    <thead class="bg-cyber-g text-light">
                                        <tr>
                                            <th>Name</th>
                                            <!-- <th>Slug</th> -->
                                            <th>Gateway</th>
                                            <!-- <th>Status</th> -->
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {% for model in aiModels %}
                                            <tr>
                                                <td>
                                                    {{ model.modelName }}<br>
                                                    <span class="badge bg-secondary {% if model.isActive %}text-cyber{% else %}text-light{% endif %}">{{ model.modelSlug }}</span>
                                                </td>
                                                <!-- <td><code>{{ model.modelSlug }}</code></td> -->
                                                <td>
                                                    {% for gateway in aiGateways %}
                                                        {% if gateway.id == model.aiGatewayId %}
                                                            {{ gateway.name }}
                                                        {% endif %}
                                                    {% endfor %}
                                                </td>
                                                <!-- <td>
                                                    {% if model.isActive %}
                                                        <span class="badge bg-success">Active</span>
                                                    {% else %}
                                                        <span class="badge bg-secondary">Inactive</span>
                                                    {% endif %}
                                                </td> -->
                                                <td>
                                                    <button type="button" class="btn btn-sm btn-outline-primary edit-model"
                                                            data-bs-toggle="modal" data-bs-target="#editModelModal"
                                                            data-id="{{ model.id }}"
                                                            data-name="{{ model.modelName }}"
                                                            data-slug="{{ model.modelSlug }}"
                                                            data-gateway="{{ model.aiGatewayId }}"
                                                            data-virtual-key="{{ model.virtualKey }}"
                                                            data-context-window="{{ model.contextWindow }}"
                                                            data-max-input="{{ model.maxInput }}"
                                                            data-max-input-image-size="{{ model.maxInputImageSize }}"
                                                            data-max-output="{{ model.maxOutput }}"
                                                            data-ppm-input="{{ model.ppmInput }}"
                                                            data-ppm-output="{{ model.ppmOutput }}"
                                                            data-is-active="{{ model.isActive ? 1 : 0 }}">
                                                        <i class="mdi mdi-pencil"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-outline-danger delete-model"
                                                            data-bs-toggle="modal" data-bs-target="#deleteModelModal"
                                                            data-id="{{ model.id }}"
                                                            data-name="{{ model.modelName }}">
                                                        <i class="mdi mdi-delete"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                    </tbody>
                                </table>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Model Modal -->
<div class="modal fade" id="addModelModal" tabindex="-1" aria-labelledby="addModelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-panel glass-panel-glow">
            <div class="modal-header bg-cyber-g border-success border-1 border-bottom">
                <h5 class="modal-title" id="addModelModalLabel">Add AI Model</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" action="{{ path('app_user_settings_ai_models_add') }}">
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="model-gateway" class="form-label">Gateway</label>
                            <select class="form-select" id="model-gateway" name="aiGatewayId" required>
                                <option value="" selected disabled>Select a gateway...</option>
                                {% for gateway in aiGateways %}
                                    <option value="{{ gateway.id }}">{{ gateway.name }}</option>
                                {% endfor %}
                            </select>
                            <div class="form-text text-muted">The gateway this model belongs to</div>
                        </div>
                        <div class="col-md-6">
                            <label for="model-virtual-key" class="form-label">Virtual Key (Optional)</label>
                            <div id="virtual-key-input-container">
                                <input type="password" class="form-control" id="model-virtual-key" name="virtualKey">
                            </div>
                            <div id="virtual-keys-container" class="d-none mt-2_">
                                <select class="form-select" id="model-virtual-keys" name="virtualKey">
                                    <option value="" selected>Select a virtual key...</option>
                                </select>
                            </div>
                            <div class="form-text text-muted">A model-specific API key, if different from the gateway key</div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="model-name" class="form-label">Model Name</label>
                            <select class="form-select" id="model-name" name="modelName" required disabled>
                                <option value="" selected>Select a gateway first...</option>
                            </select>
                            <div class="form-text text-muted">The display name for this model</div>
                        </div>
                        <div class="col-md-6">
                            <label for="model-slug" class="form-label">Model Slug</label>
                            <input type="text" class="form-control" id="model-slug" name="modelSlug" required>
                            <div class="form-text text-muted">The technical identifier for this model (e.g., "claude-3-opus-20240229")</div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="model-context-window" class="form-label">Context Window</label>
                            <input type="number" class="form-control" id="model-context-window" name="contextWindow">
                            <div class="form-text text-muted">Maximum tokens the model can process</div>
                        </div>
                        <div class="col-md-6">
                            <label for="model-max-output" class="form-label">Max Output</label>
                            <input type="number" class="form-control" id="model-max-output" name="maxOutput">
                            <div class="form-text text-muted">Maximum tokens the model can generate</div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="model-max-input" class="form-label">Max Input</label>
                            <input type="text" class="form-control" id="model-max-input" name="maxInput">
                            <div class="form-text text-muted">Maximum input size (e.g., "200K")</div>
                        </div>
                        <div class="col-md-6">
                            <label for="model-max-input-image-size" class="form-label">Max Input Image Size</label>
                            <input type="text" class="form-control" id="model-max-input-image-size" name="maxInputImageSize">
                            <div class="form-text text-muted">Maximum image size (e.g., "5MB")</div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="model-ppm-input" class="form-label">Price Per Million (Input)</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="model-ppm-input" name="ppmInput" step="0.01">
                            </div>
                            <div class="form-text text-muted">Cost per million input tokens</div>
                        </div>
                        <div class="col-md-6">
                            <label for="model-ppm-output" class="form-label">Price Per Million (Output)</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="model-ppm-output" name="ppmOutput" step="0.01">
                            </div>
                            <div class="form-text text-muted">Cost per million output tokens</div>
                        </div>
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="model-is-active" name="isActive" value="1" checked>
                        <label class="form-check-label" for="model-is-active">Active</label>
                        <div class="form-text text-muted">Enable or disable this model</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-cyber">
                        <i class="mdi mdi-content-save me-1"></i> Save Model
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Model Modal -->
<div class="modal fade" id="editModelModal" tabindex="-1" aria-labelledby="editModelModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content glass-panel glass-panel-glow">
            <div class="modal-header bg-cyber-g border-success border-1 border-bottom">
                <h5 class="modal-title" id="editModelModalLabel">Edit AI Model</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" action="{{ path('app_user_settings_ai_models_edit') }}">
                <input type="hidden" id="edit-model-id" name="id">
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="edit-model-gateway" class="form-label">Gateway</label>
                            <select class="form-select" id="edit-model-gateway" name="aiGatewayId" required>
                                {% for gateway in aiGateways %}
                                    <option value="{{ gateway.id }}">{{ gateway.name }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="edit-model-virtual-key" class="form-label">Virtual Key (Optional)</label>
                            <div id="edit-virtual-key-input-container">
                                <input type="password" class="form-control" id="edit-model-virtual-key" name="virtualKey" placeholder="Leave empty to keep current key">
                            </div>
                            <div id="edit-virtual-keys-container" class="d-none mt-2_">
                                <select class="form-select" id="edit-model-virtual-keys" name="virtualKey">
                                    <option value="" selected>Select a virtual key...</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="edit-model-name" class="form-label">Model Name</label>
                            <select class="form-select" id="edit-model-name" name="modelName" required>
                                <option value="" selected>Select a model...</option>
                                <optgroup label="Anthropic">
                                    <option value="Claude 3.7 Sonnet">Claude 3.7 Sonnet</option>
                                    <option value="Claude 3.5 Haiku">Claude 3.5 Haiku</option>
                                    <option value="Claude 3 Opus">Claude 3 Opus</option>
                                    <option value="Claude 3 Sonnet">Claude 3 Sonnet</option>
                                    <option value="Claude 3 Haiku">Claude 3 Haiku</option>
                                    <option value="Claude 2">Claude 2</option>
                                </optgroup>
                                <optgroup label="Groq">
                                    <option value="Llama 4 Scout">Llama 4 Scout (17B)</option>
                                    <option value="Llama 4 Maverick">Llama 4 Maverick (17B)</option>
                                    <option value="Llama 3.3 Versatile">Llama 3.3 Versatile (70B)</option>
                                    <option value="Llama 3.1 Instant">Llama 3.1 Instant (8B)</option>
                                    <option value="Gemma 2">Gemma 2 (9B)</option>
                                    <option value="Qwen QWQ">Qwen QWQ (32B)</option>
                                    <option value="Qwen 2.5 Coder">Qwen 2.5 Coder (32B)</option>
                                    <option value="Qwen 2.5">Qwen 2.5 (32B)</option>
                                    <option value="DeepSeek R1 Distill">DeepSeek R1 Distill (70B)</option>
                                </optgroup>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="edit-model-slug" class="form-label">Model Slug</label>
                            <input type="text" class="form-control" id="edit-model-slug" name="modelSlug" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="edit-model-context-window" class="form-label">Context Window</label>
                            <input type="number" class="form-control" id="edit-model-context-window" name="contextWindow">
                        </div>
                        <div class="col-md-6">
                            <label for="edit-model-max-output" class="form-label">Max Output</label>
                            <input type="number" class="form-control" id="edit-model-max-output" name="maxOutput">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="edit-model-max-input" class="form-label">Max Input</label>
                            <input type="text" class="form-control" id="edit-model-max-input" name="maxInput">
                        </div>
                        <div class="col-md-6">
                            <label for="edit-model-max-input-image-size" class="form-label">Max Input Image Size</label>
                            <input type="text" class="form-control" id="edit-model-max-input-image-size" name="maxInputImageSize">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="edit-model-ppm-input" class="form-label">Price Per Million (Input)</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="edit-model-ppm-input" name="ppmInput" step="0.01">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="edit-model-ppm-output" class="form-label">Price Per Million (Output)</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="edit-model-ppm-output" name="ppmOutput" step="0.01">
                            </div>
                        </div>
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="edit-model-is-active" name="isActive" value="1">
                        <label class="form-check-label" for="edit-model-is-active">Active</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-cyber">
                        <i class="mdi mdi-content-save me-1"></i> Update Model
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Model Modal -->
<div class="modal fade" id="deleteModelModal" tabindex="-1" aria-labelledby="deleteModelModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content glass-panel glass-panel-glow">
            <div class="modal-header bg-danger border-danger border-1 border-bottom">
                <span class="modal-title text-light fs-5" id="deleteModelModalLabel">Delete AI Model</span>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" action="{{ path('app_user_settings_ai_models_delete') }}">
                <input type="hidden" id="delete-model-id" name="id">
                <div class="modal-body">
                    <p>Are you sure you want to delete the model <strong id="delete-model-name"></strong>?</p>
                    <p class="text-danger">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="mdi mdi-delete me-1"></i> Delete Model
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Model name select change handler for Add Model modal
        const modelNameSelect = document.getElementById('model-name');
        const modelSlugInput = document.getElementById('model-slug');
        const gatewaySelect = document.getElementById('model-gateway');
        const virtualKeyInput = document.getElementById('model-virtual-key');
        const virtualKeysContainer = document.getElementById('virtual-keys-container');
        const virtualKeyInputContainer = document.getElementById('virtual-key-input-container');
        const virtualKeysSelect = document.getElementById('model-virtual-keys');
        
        // Edit modal elements
        const editGatewaySelect = document.getElementById('edit-model-gateway');
        const editVirtualKeyInput = document.getElementById('edit-model-virtual-key');
        const editVirtualKeysContainer = document.getElementById('edit-virtual-keys-container');
        const editVirtualKeyInputContainer = document.getElementById('edit-virtual-key-input-container');
        const editVirtualKeysSelect = document.getElementById('edit-model-virtual-keys');
        
        // Function to handle gateway change and fetch virtual keys
        function handleGatewayChange(gatewaySelectElement, virtualKeysSelectElement, virtualKeysContainerElement, virtualKeyInputContainerElement, virtualKeyInputElement, isEditMode = false) {
            const selectedGatewayId = gatewaySelectElement.value;
            const selectedGatewayName = gatewaySelectElement.options[gatewaySelectElement.selectedIndex].text;
            
            if (selectedGatewayName.includes('PortkeyAI')) {
                // Get the gateway details to fetch virtual keys
                fetch(`/api/ai/gateway/${selectedGatewayId}/full`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(gateway => {
                    // Try to fetch virtual keys
                    fetch(`${gateway.apiEndpointUrl}/virtual-keys`, {
                        method: 'GET',
                        headers: {
                            'x-portkey-api-key': gateway.apiKey
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log(`${isEditMode ? 'Edit' : 'Add'} modal virtual keys response:`, data);
                        // Clear and populate the virtual keys dropdown
                        virtualKeysSelectElement.innerHTML = '<option value="" selected>Select a virtual key...</option>';
                        
                        // Check the structure of the response
                        const keys = data.data || data.keys || data;
                        
                        if (Array.isArray(keys)) {
                            keys.forEach(key => {
                                if (key.active !== false) { // Include if active or if active property doesn't exist
                                    const option = document.createElement('option');
                                    option.value = key.slug;
                                    option.textContent = `${key.provider || ''} - ${key.name || key.slug}`;
                                    
                                    // Check if this option should be selected (matches the current virtual key)
                                    if (isEditMode && virtualKeyInputElement) {
                                        const currentVirtualKey = virtualKeyInputElement.value;
                                        if (key.slug === currentVirtualKey) {
                                            option.selected = true;
                                        }
                                    }
                                    
                                    virtualKeysSelectElement.appendChild(option);
                                }
                            });
                        } else {
                            console.error('Unexpected response format:', data);
                        }
                        
                        // Show the virtual keys dropdown, hide the input
                        virtualKeysContainerElement.classList.remove('d-none');
                        virtualKeyInputContainerElement.classList.add('d-none');
                    })
                    .catch(error => {
                        console.error('Error fetching virtual keys:', error);
                        // Show the regular input if we can't fetch virtual keys
                        virtualKeysContainerElement.classList.add('d-none');
                        virtualKeyInputContainerElement.classList.remove('d-none');
                    });
                })
                .catch(error => {
                    console.error('Error fetching gateway details:', error);
                    virtualKeysContainerElement.classList.add('d-none');
                    virtualKeyInputContainerElement.classList.remove('d-none');
                });
            } else {
                // For non-PortkeyAI gateways, show the regular input
                virtualKeysContainerElement.classList.add('d-none');
                virtualKeyInputContainerElement.classList.remove('d-none');
            }
        }
        
        // Function to fetch models from a gateway and populate the model dropdown
        function fetchModelsForGateway(gatewayId, modelSelectElement, modelSlugInputElement) {
            // Clear and disable the model dropdown while loading
            modelSelectElement.innerHTML = '<option value="" selected>Loading models...</option>';
            modelSelectElement.disabled = true;
            
            // Fetch models from the API
            fetch(`/api/ai/gateway/${gatewayId}/models`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                // Clear the dropdown
                modelSelectElement.innerHTML = '<option value="" selected>Select a model...</option>';
                
                // Group models by provider if available
                const modelsByProvider = {};
                
                data.forEach(model => {
                    const provider = model.provider || 'Other';
                    if (!modelsByProvider[provider]) {
                        modelsByProvider[provider] = [];
                    }
                    modelsByProvider[provider].push(model);
                });
                
                // Add models to dropdown grouped by provider
                Object.keys(modelsByProvider).forEach(provider => {
                    const optgroup = document.createElement('optgroup');
                    optgroup.label = provider.charAt(0).toUpperCase() + provider.slice(1); // Capitalize provider name
                    
                    modelsByProvider[provider].forEach(model => {
                        const option = document.createElement('option');
                        option.value = model.name;
                        option.textContent = model.name;
                        option.dataset.slug = model.id; // Store the model ID/slug as a data attribute
                        optgroup.appendChild(option);
                    });
                    
                    modelSelectElement.appendChild(optgroup);
                });
                
                // Enable the model dropdown
                modelSelectElement.disabled = false;
            })
            .catch(error => {
                console.error('Error fetching models:', error);
                modelSelectElement.innerHTML = '<option value="" selected>Error loading models</option>';
                modelSelectElement.disabled = false;
            });
        }
        
        // Handle gateway change for add modal
        gatewaySelect.addEventListener('change', function() {
            // Handle virtual keys
            handleGatewayChange(
                this, // gatewaySelectElement
                virtualKeysSelect, // virtualKeysSelectElement
                virtualKeysContainer, // virtualKeysContainerElement
                virtualKeyInputContainer, // virtualKeyInputContainerElement
                virtualKeyInput, // virtualKeyInputElement
                false // isEditMode
            );
            
            // Fetch models for the selected gateway
            const selectedGatewayId = this.value;
            if (selectedGatewayId) {
                fetchModelsForGateway(selectedGatewayId, modelNameSelect, modelSlugInput);
            } else {
                // Reset and disable the model dropdown if no gateway is selected
                modelNameSelect.innerHTML = '<option value="" selected>Select a gateway first...</option>';
                modelNameSelect.disabled = true;
            }
        });
        
        // Handle gateway change for edit modal
        const editModelNameSelect = document.getElementById('edit-model-name');
        const editModelSlugInput = document.getElementById('edit-model-slug');
        
        editGatewaySelect.addEventListener('change', function() {
            // Handle virtual keys
            handleGatewayChange(
                this, // gatewaySelectElement
                editVirtualKeysSelect, // virtualKeysSelectElement
                editVirtualKeysContainer, // virtualKeysContainerElement
                editVirtualKeyInputContainer, // virtualKeyInputContainerElement
                editVirtualKeyInput, // virtualKeyInputElement
                true // isEditMode
            );
            
            // Fetch models for the selected gateway
            const selectedGatewayId = this.value;
            if (selectedGatewayId) {
                fetchModelsForGateway(selectedGatewayId, editModelNameSelect, editModelSlugInput);
            } else {
                editModelNameSelect.innerHTML = '<option value="" selected>Select a gateway first...</option>';
                editModelNameSelect.disabled = true;
            }
        });
        
        // Model name select change handler - these variables were already declared above
        modelNameSelect.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            
            // Get the model slug from the data attribute we set when populating the dropdown
            if (selectedOption && selectedOption.dataset.slug) {
                modelSlugInput.value = selectedOption.dataset.slug;
            } else {
                modelSlugInput.value = '';
            }
        });
        
        // Edit model name select change handler
        editModelNameSelect.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            
            // Get the model slug from the data attribute we set when populating the dropdown
            if (selectedOption && selectedOption.dataset.slug) {
                editModelSlugInput.value = selectedOption.dataset.slug;
            } else {
                editModelSlugInput.value = '';
            }
        });
        
        // Edit model modal
        const editButtons = document.querySelectorAll('.edit-model');
        editButtons.forEach(button => {
            button.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                const name = this.getAttribute('data-name');
                const slug = this.getAttribute('data-slug');
                const gateway = this.getAttribute('data-gateway');
                const virtualKey = this.getAttribute('data-virtual-key');
                const contextWindow = this.getAttribute('data-context-window');
                const maxInput = this.getAttribute('data-max-input');
                const maxInputImageSize = this.getAttribute('data-max-input-image-size');
                const maxOutput = this.getAttribute('data-max-output');
                const ppmInput = this.getAttribute('data-ppm-input');
                const ppmOutput = this.getAttribute('data-ppm-output');
                const isActive = this.getAttribute('data-is-active') === '1';
                
                document.getElementById('edit-model-id').value = id;
                
                // First set the gateway, which will trigger the model fetch
                const editModelNameSelect = document.getElementById('edit-model-name');
                
                // Set the gateway dropdown value
                editGatewaySelect.value = gateway;
                
                // Trigger the change event to fetch models
                const changeEvent = new Event('change');
                editGatewaySelect.dispatchEvent(changeEvent);
                
                // We need to wait for the models to be fetched before we can select the right one
                // This is a simple polling approach
                const selectModelInterval = setInterval(() => {
                    // Check if models have been loaded
                    if (!editModelNameSelect.disabled && editModelNameSelect.options.length > 1) {
                        clearInterval(selectModelInterval);
                        
                        // Find the option with the matching name
                        let foundMatch = false;
                        for (let i = 0; i < editModelNameSelect.options.length; i++) {
                            if (editModelNameSelect.options[i].value === name) {
                                editModelNameSelect.selectedIndex = i;
                                foundMatch = true;
                                break;
                            }
                        }
                        
                        // If no match found, just set the first non-empty option
                        if (!foundMatch && editModelNameSelect.options.length > 1) {
                            editModelNameSelect.selectedIndex = 1;
                        }
                        
                        // Set the model slug manually since we might not have found a match
                        editModelSlugInput.value = slug;
                    }
                }, 100); // Check every 100ms
                
                document.getElementById('edit-model-slug').value = slug;
                document.getElementById('edit-model-gateway').value = gateway;
                document.getElementById('edit-model-virtual-key').value = virtualKey;
                document.getElementById('edit-model-context-window').value = contextWindow;
                document.getElementById('edit-model-max-input').value = maxInput;
                document.getElementById('edit-model-max-input-image-size').value = maxInputImageSize;
                document.getElementById('edit-model-max-output').value = maxOutput;
                document.getElementById('edit-model-ppm-input').value = ppmInput;
                document.getElementById('edit-model-ppm-output').value = ppmOutput;
                document.getElementById('edit-model-is-active').checked = isActive;
                
                // Check if it's a PortkeyAI gateway and fetch virtual keys if needed
                const selectedGatewayElement = document.getElementById('edit-model-gateway');
                const selectedGatewayName = selectedGatewayElement.options[selectedGatewayElement.selectedIndex].text;
                
                if (selectedGatewayName.includes('PortkeyAI')) {
                    // Trigger the change event to fetch virtual keys
                    selectedGatewayElement.dispatchEvent(new Event('change'));
                }
            });
        });
        
        // Delete model modal
        const deleteButtons = document.querySelectorAll('.delete-model');
        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                const name = this.getAttribute('data-name');
                
                document.getElementById('delete-model-id').value = id;
                document.getElementById('delete-model-name').textContent = name;
            });
        });
    });
</script>
{% endblock %}
